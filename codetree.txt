================================================================
Files Structure
================================================================
app/
  components/
    charts/
      YearRow.tsx
    ui/
      BubbleCircle.tsx
  features/
    seasons/
      components/
        SeasonCard.tsx
        TopSeasonalPosts.tsx
      hooks/
        useSeasonStats.ts
        useTopPosts.ts
      utils/
        normalizeBubbleSize.ts
        transformSeasonStats.ts
  lib/
    axios.ts
    constants.ts
  pages/
    SeasonsPage.tsx
  globals.css
  layout.tsx
  page.tsx
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
setup.sh
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/components/charts/YearRow.tsx
================
// components/YearRow.tsx
import React from 'react';
import BubbleCircle from '@/components/ui/BubbleCircle';
import { SeasonStats } from '@/features/seasons/utils/transformSeasonStats';

type YearRowProps = {
  year: string;
  data: SeasonStats[];
  minPosts: number;
  maxPosts: number;
  minComments: number;
  maxComments: number;
  minViews: number;
  maxViews: number;
};

const YearRow: React.FC<YearRowProps> = ({
  year,
  data,
  minPosts,
  maxPosts,
  minComments,
  maxComments,
  minViews,
  maxViews
}) => {
  // مرتب‌سازی داده‌ها بر اساس شماره ماه
  const sortedData = data.sort((a, b) => a.month - b.month);
  
  return (
    <div className="my-4">
    <div className="grid grid-cols-4 gap-4">
    <h3 className="text-l font-semibold w-full text-shadow-xs">{Number(year) - 621}</h3>
      {sortedData.map((stat) => (
        <div key={stat.month} className="w-full">
          <BubbleCircle
            stat={stat}
            minPosts={minPosts}
            maxPosts={maxPosts}
            minComments={minComments}
            maxComments={maxComments}
            minViews={minViews}
            maxViews={maxViews}
          />
        </div>
      ))}
    </div>
  </div>
  );
};

export default YearRow;

================
File: app/components/ui/BubbleCircle.tsx
================
import React from 'react';
import { normalize } from '@/features/seasons/utils/normalizeBubbleSize';
import { SeasonStats } from '@/features/seasons/utils/transformSeasonStats';

type BubbleCircleProps = {
  stat: SeasonStats;
  minPosts: number;
  maxPosts: number;
  minComments: number;
  maxComments: number;
  minViews: number;
  maxViews: number;
};

const seasonColors: Record<string, { post: string; comment: string; view: string }> = {
  spring: { post: 'bg-green-300', comment: 'bg-green-500', view: 'bg-green-700' },
  summer: { post: 'bg-yellow-300', comment: 'bg-yellow-500', view: 'bg-yellow-700' },
  autumn: { post: 'bg-orange-300', comment: 'bg-orange-500', view: 'bg-orange-700' },
  winter: { post: 'bg-blue-300', comment: 'bg-blue-500', view: 'bg-blue-700' },
};

const BubbleCircle: React.FC<BubbleCircleProps> = ({
  stat,
  minPosts,
  maxPosts,
  minComments,
  maxComments,
  minViews,
  maxViews,
}) => {
  const postSize = normalize(stat.posts, minPosts, maxPosts);
  const commentSize = normalize(stat.comments, minComments, maxComments);
  const viewSize = normalize(stat.views, minViews, maxViews);

  const colors = seasonColors[stat.season] || {
    post: 'bg-gray-300',
    comment: 'bg-gray-500',
    view: 'bg-gray-700',
  };

  return (
    <div className="flex justify-center gap-2">
      {/* دایره پست‌ها */}
      {stat.posts > 0 && (
        <div
          className={`relative group rounded-full opacity-70 shadow-md ${colors.post}`}
          style={{ width: postSize, height: postSize }}
        >
          <div className="absolute bottom-full mb-2 hidden group-hover:block bg-black text-white text-xs rounded py-1 px-2 whitespace-nowrap z-10">
            {stat.posts.toLocaleString("fa-IR")} خبر
          </div>
        </div>
      )}

      {/* دایره دیدگاه‌ها */}
      {stat.comments > 0 && (
        <div
          className={`relative group rounded-full opacity-70 shadow-md ${colors.comment}`}
          style={{ width: commentSize, height: commentSize }}
        >
          <div className="absolute bottom-full mb-2 hidden group-hover:block bg-black text-white text-xs rounded py-1 px-2 whitespace-nowrap z-10">
            {stat.comments.toLocaleString("fa-IR")} نظر
          </div>
        </div>
      )}

      {/* دایره بازدیدها */}
      {stat.views > 0 && (
        <div
          className={`relative group rounded-full opacity-70 shadow-md ${colors.view}`}
          style={{ width: viewSize, height: viewSize }}
        >
          <div className="absolute bottom-full mb-2 hidden group-hover:block bg-black text-white text-xs rounded py-1 px-2 whitespace-nowrap z-10">
            {stat.views.toLocaleString("fa-IR")} مشاهده
          </div>
        </div>
      )}
    </div>
  );
};

export default BubbleCircle;

================
File: app/features/seasons/components/SeasonCard.tsx
================
// components/SeasonCard.tsx
import React from "react";
import YearRow from "@/components/charts/YearRow";
import { SeasonStats } from "@/features/seasons/utils/transformSeasonStats";

type SeasonCardProps = {
  season: string;
  data: SeasonStats[];
  minPosts: number;
  maxPosts: number;
  minComments: number;
  maxComments: number;
  minViews: number;
  maxViews: number;
};

const SeasonCard: React.FC<SeasonCardProps> = ({
  season,
  data,
  minPosts,
  maxPosts,
  minComments,
  maxComments,
  minViews,
  maxViews
}) => {
  const years = Array.from(new Set(data.map((stat) => stat.year))).sort(
    (a, b) => Number(b) - Number(a)
  );

  const yearPairs = [];
  for (let i = 0; i < years.length; i += 2) {
    yearPairs.push([years[i], years[i + 1]]);
  }

  // تعریف mapping فصل به ماه‌های مربوطه (مثلاً فصل‌های شمسی)
  const seasonMonthMapping: { [key: string]: number[] } = {
    spring: [1, 2, 3],
    summer: [4, 5, 6],
    autumn: [7, 8, 9],
    winter: [10, 11, 12],
  };
  const months = seasonMonthMapping[season] || [];

  // mapping شماره ماه به نام شمسی
  const jalaliMonthNames: { [key: number]: string } = {
    1: "فروردین",
    2: "اردیبهشت",
    3: "خرداد",
    4: "تیر",
    5: "مرداد",
    6: "شهریور",
    7: "مهر",
    8: "آبان",
    9: "آذر",
    10: "دی",
    11: "بهمن",
    12: "اسفند",
  };


  // مسیر تصاویر بک‌گراند برای هر فصل
  let backgroundImage = "/seasons/spring.png";
  if (season === "summer") {
    backgroundImage = "/seasons/summer.png";
  } else if (season === "autumn") {
    backgroundImage = "/seasons/autumn.png";
  } else if (season === "winter") {
    backgroundImage = "/seasons/winter.png";
  }

  return (
    <div
      className="relative p-6 rounded-xl shadow-lg text-white bg-cover bg-center overflow-hidden"
      style={{ backgroundImage: `url(${backgroundImage})` }}
    >
      <div className="relative z-10">
        <div className="space-y-4">
          {yearPairs.map((pair, index) => (
            <div key={index} className="grid grid-cols-2 gap-4">
              {pair.map((year) => {
                if (!year) return null;
                const yearData = data.filter((stat) => stat.year === year);
                return (
                  <YearRow
                    key={year}
                    year={year}
                    data={yearData}
                    minPosts={minPosts}
                    maxPosts={maxPosts}
                    minComments={minComments}
                    maxComments={maxComments}
                    maxViews={maxViews}
                    minViews={minViews}
                  />
                );
              })}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};
export default SeasonCard;

================
File: app/features/seasons/components/TopSeasonalPosts.tsx
================
"use client";
import React, { useEffect, useState } from "react";

const YEARS: number[] = Array.from(
  { length: 2025 - 2016 + 1 },
  (_, i) => 2025 - i
);

type Post = {
  post_id: string;
  post_title: string;
  total_views: string;
  comment_count: string;
  thumbnail_url: string;
};

type DataByYear = {
  [year: number]: Post[];
};

export function useTopSeasonalPosts(
  season: string,
  initialYearCount: number = 2
) {
  const [dataByYear, setDataByYear] = useState<DataByYear>({});
  const [currentYearIndex, setCurrentYearIndex] = useState<number>(
    initialYearCount - 1
  );
  const [loading, setLoading] = useState<boolean>(false);

  useEffect(() => {
    setDataByYear({});
    setCurrentYearIndex(initialYearCount - 1);
  }, [season, initialYearCount]);

  useEffect(() => {
    if (currentYearIndex < YEARS.length) {
      const year: number = YEARS[currentYearIndex];
      if (!dataByYear[year]) {
        fetchDataForYear(year);
      }
    }
  }, [currentYearIndex, dataByYear]);

  const fetchDataForYear = async (year: number) => {
    setLoading(true);
    try {
      const res = await fetch(
        `https://kermaneno.ir/wp-json/seasons/v1/top/${season}/${year}`
      );
      const json: Post[] = await res.json();
      setDataByYear((prev) => ({ ...prev, [year]: json }));
    } catch (error) {
      console.error("Error fetching data:", error);
      setDataByYear((prev) => ({ ...prev, [year]: [] }));
    }
    setLoading(false);
  };

  const loadMore = () => {
    if (currentYearIndex < YEARS.length - 1) {
      setCurrentYearIndex((prev) => prev + 1);
    }
  };

  return {
    dataByYear,
    yearsShown: YEARS.slice(0, currentYearIndex + 1),
    canLoadMore: currentYearIndex < YEARS.length - 1,
    loadMore,
    loading,
  };
}

export function TopSeasonalPosts({
  season,
  initialYearCount = 2,
}: {
  season: string;
  initialYearCount?: number;
}) {
  const { dataByYear, yearsShown, canLoadMore, loadMore, loading } =
    useTopSeasonalPosts(season, initialYearCount);

  return (
    <div className="space-y-10">
      {yearsShown.map((year) => {
        const jalaliYear = (year - 621).toLocaleString("fa-IR", {
          useGrouping: false,
        });
        return (
          <div key={year}>
            <h2 className="text-xl font-bold mb-4">سال {jalaliYear}</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 gap-4">
              {(dataByYear[year] || []).map((post) => {
                const viewsFormatted = Number(post.total_views).toLocaleString(
                  "fa-IR"
                );
                const commentCount = Number(post.comment_count);
                const commentsFormatted = commentCount.toLocaleString("fa-IR");

                return (
                  <div
                    key={post.post_id}
                    className="relative rounded-2xl overflow-hidden shadow-sm group"
                  >
                    <img
                      src={post.thumbnail_url}
                      alt={post.post_title}
                      className="w-full h-40 object-cover"
                    />
                    {/* پوشش متن روی عکس */}
                    <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent text-white p-3 text-right">
                      <p className="text-sm font-semibold leading-tight">
                        {post.post_title}
                      </p>
                    </div>
                    {/* تعداد بازدید */}
                    <div className="absolute top-2 left-2 bg-black/60 text-white text-xs px-2 py-1 rounded-full">
                      👁️ {viewsFormatted}
                    </div>
                    {/* تعداد کامنت */}
                    {commentCount > 0 && (
                      <div className="absolute top-2 right-2 bg-black/60 text-white text-xs px-2 py-1 rounded-full">
                        💬 {commentsFormatted}
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        );
      })}

      {canLoadMore && (
        <div className="text-center mt-6">
          <button
            onClick={loadMore}
            disabled={loading}
            className="px-4 py-2 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition"
          >
            {loading ? "در حال بارگذاری..." : "نمایش سال بعد"}
          </button>
        </div>
      )}
    </div>
  );
}

================
File: app/features/seasons/hooks/useSeasonStats.ts
================
// app/hooks/useSeasonData.ts
import { useEffect, useState } from 'react';
import axios from '../lib/axios';

export const useSeasonData = (season: string) => {
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const res = await axios.get('/stats');
        const filtered = res.data.filter((item: any) => item.season === season);
        setData(filtered);
      } catch (err: any) {
        setError(err.message || 'خطا در دریافت داده');
      }
      setLoading(false);
    };

    fetchData();
  }, [season]);

  return { data, loading, error };
};

================
File: app/features/seasons/hooks/useTopPosts.ts
================
// app/hooks/useTopPosts.ts
import { useEffect, useState } from 'react';
import axios from '../lib/axios';

export const useTopPosts = (season: string, year: number) => {
  const [data, setData] = useState<any[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const res = await axios.get(`/top/${season}/${year}`);
        setData(res.data);
      } catch (err: any) {
        setError(err.message || 'خطا در دریافت داده');
      }
      setLoading(false);
    };

    fetchData();
  }, [season, year]);

  return { data, loading, error };
};

================
File: app/features/seasons/utils/normalizeBubbleSize.ts
================
// utils/normalize.ts
export const normalize = (
  value: number,
  min: number,
  max: number,
  minSize = 10,
  maxSize = 60
): number => {
  if (max === min) return (minSize + maxSize) / 2;
  return ((value - min) / (max - min)) * (maxSize - minSize) + minSize;
};

================
File: app/features/seasons/utils/transformSeasonStats.ts
================
// utils/flattenStats.ts
export type SeasonStats = {
    season: "spring" | "summer" | "autumn" | "winter";
    year: string;
    month: number;
    posts: number;
    comments: number;
    views: number; // ✅ اضافه کن
  };
  
  export const flattenStats = (data: any): SeasonStats[] => {
    const stats: SeasonStats[] = [];
    for (const season in data) {
      const seasonData = data[season];
      for (const year in seasonData) {
        const yearData = seasonData[year];
        for (const month in yearData) {
          const stat = yearData[month];
          stats.push({
            season: season as "spring" | "summer" | "autumn" | "winter",
            year,
            month: parseInt(month, 10),
            posts: stat.posts,
            comments: stat.comments,
            views: stat.views,
          });
        }
      }
    }
    return stats;
  };

================
File: app/lib/axios.ts
================
import axios from 'axios';
import { API_BASE_URL } from './constants';

const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

export default axiosInstance;

================
File: app/lib/constants.ts
================
export const API_BASE_URL = 'https://kermaneno.ir/wp-json/seasons/v1';

================
File: app/pages/SeasonsPage.tsx
================
// app/pages/PageClient.tsx
"use client";

import React, { useEffect, useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useSwipeable } from "react-swipeable";
import SeasonCard from "../features/seasons/components/SeasonCard";
import { TopSeasonalPosts } from "../features/seasons/components/TopSeasonalPosts";
import {
  flattenStats,
  SeasonStats,
} from "../features/seasons/utils/transformSeasonStats";
import axios from "@/lib/axios";

const seasonOrder = ["spring", "summer", "autumn", "winter"];
const seasonLabels: Record<string, string> = {
  spring: "🌸 بهار",
  summer: "☀️ تابستان",
  autumn: "🍁 پاییز",
  winter: "❄️ زمستان",
};

const PageClient = () => {
  const [stats, setStats] = useState<SeasonStats[]>([]);
  const [loading, setLoading] = useState(true);
  const [currentSeasonIndex, setCurrentSeasonIndex] = useState(0);
  const [visibleYearsBySeason, setVisibleYearsBySeason] = useState<
    Record<string, number>
  >(Object.fromEntries(seasonOrder.map((season) => [season, 2])));

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const res = await axios.get("/stats");
        setStats(flattenStats(res.data));
      } catch (error) {
        console.error("خطا در دریافت داده:", error);
      }
      setLoading(false);
    };
    fetchData();
  }, []);

  const season = seasonOrder[currentSeasonIndex];
  const seasonData = stats.filter((s) => s.season === season);

  const postValues = stats.map((s) => s.posts);
  const commentValues = stats.map((s) => s.comments);
  const minPosts = Math.min(...postValues);
  const maxPosts = Math.max(...postValues);
  const minComments = Math.min(...commentValues);
  const maxComments = Math.max(...commentValues);
  const viewValues = stats.map((s) => s.views);
  const minViews = Math.min(...viewValues);
  const maxViews = Math.max(...viewValues);

  const swipeHandlers = useSwipeable({
    onSwipedLeft: () =>
      setCurrentSeasonIndex((i) => (i + 1) % seasonOrder.length),
    onSwipedRight: () =>
      setCurrentSeasonIndex(
        (i) => (i - 1 + seasonOrder.length) % seasonOrder.length
      ),
    trackTouch: true,
    preventScrollOnSwipe: true,
  });

  // مسیر تصاویر بک‌گراند برای هر فصل
  let backgroundImage = "/seasons/spring.png";
  if (season === "summer") {
    backgroundImage = "/seasons/summer.png";
  } else if (season === "autumn") {
    backgroundImage = "/seasons/autumn.png";
  } else if (season === "winter") {
    backgroundImage = "/seasons/winter.png";
  }

  const loadMoreYears = () => {
    setVisibleYearsBySeason((prev) => ({
      ...prev,
      [season]: (prev[season] || 2) + 1,
    }));
  };

  if (loading) {
    return <div className="text-center py-10">در حال بارگذاری...</div>;
  }

  return (
    <div className="w-full h-screen overflow-hidden flex flex-col">
      {/* انتخاب فصل */}
      <div className="flex justify-center gap-2 p-4 bg-white/60 z-10 backdrop-blur-md">
        {seasonOrder.map((s, idx) => (
          <button
            key={s}
            className={`transition px-4 py-2 text-sm rounded-full font-bold shadow-sm
              ${
                idx === currentSeasonIndex
                  ? "bg-blue-700 text-white scale-105 shadow-md"
                  : "bg-white text-gray-700 hover:bg-gray-200"
              }`}
            onClick={() => setCurrentSeasonIndex(idx)}
          >
            {seasonLabels[s]}
          </button>
        ))}
      </div>

      {/* نمایش فصل */}
      <AnimatePresence mode="wait">
        <motion.div
          {...swipeHandlers}
          key={season}
          className="h-full w-full overflow-hidden"
          initial={{ rotateY: 90, opacity: 0 }}
          animate={{ rotateY: 0, opacity: 1 }}
          exit={{ rotateY: -90, opacity: 0 }}
          transition={{ duration: 0.8 }}
        >
          <div
            className="h-full overflow-y-auto grid grid-cols-1 md:grid-cols-2 gap-6 bg-black/50 backdrop-blur-sm p-4"
            style={{
              backgroundImage: `url(${backgroundImage})`,
              backgroundSize: "cover",
              backgroundPosition: "center",
            }}
          >
              <div className="absolute inset-0 bg-black/50 backdrop-blur-sm z-0"></div>
            <div className="space-y-4">
              <SeasonCard
                season={season}
                data={seasonData}
                minPosts={minPosts}
                maxPosts={maxPosts}
                minComments={minComments}
                maxComments={maxComments}
                minViews={minViews}
                maxViews={maxViews}
              />
            </div>
            <div>
<TopSeasonalPosts season={season} initialYearCount={2} />
            </div>            
          </div>
        </motion.div>
      </AnimatePresence>
    </div>
  );
};

export default PageClient;

================
File: app/globals.css
================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: app/page.tsx
================
'use client';
import PageClient from './pages/SeasonsPage';

export default PageClient;

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;

================
File: package.json
================
{
  "name": "kmn-infographic",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "axios": "^1.8.4",
    "framer-motion": "^12.6.5",
    "jalali-moment": "^3.3.11",
    "motion": "^12.6.5",
    "next": "15.2.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-swipeable": "^7.0.2"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: setup.sh
================
#!/bin/bash

echo "📁 در حال ساخت ساختار جدید پروژه..."

# پوشه‌های اصلی
mkdir -p app/pages
mkdir -p app/features/seasons/{hooks,components,utils,api}
mkdir -p app/components/ui
mkdir -p app/components/charts
mkdir -p app/lib
mkdir -p app/styles

# انتقال فایل‌ها (اختیاری: می‌تونی دستی انجام بدی)
echo "🔄 انتقال فایل‌های موجود (اگر مایل بودی)..."

# فایل‌هایی که باید منتقل بشن (اگر هستن)
FILES_TO_MOVE=(
  "app/hooks/useSeasonData.ts:app/features/seasons/hooks/useSeasonStats.ts"
  "app/hooks/useTopPosts.ts:app/features/seasons/hooks/useTopPosts.ts"
  "app/utils/flattenStats.ts:app/features/seasons/utils/transformSeasonStats.ts"
  "app/utils/normalize.ts:app/features/seasons/utils/normalizeBubbleSize.ts"
  "app/components/SeasonCard.tsx:app/features/seasons/components/SeasonCard.tsx"
  "app/components/TopSeasonalPosts.tsx:app/features/seasons/components/TopSeasonalPosts.tsx"
  "app/components/BubbleCircle.tsx:app/components/ui/BubbleCircle.tsx"
  "app/components/YearRow.tsx:app/components/charts/YearRow.tsx"
  "app/PageClient.tsx:app/pages/SeasonsPage.tsx"
)

for entry in "${FILES_TO_MOVE[@]}"; do
  IFS=":" read -r src dst <<< "$entry"
  if [ -f "$src" ]; then
    mkdir -p "$(dirname "$dst")"
    mv "$src" "$dst"
    echo "✅ انتقال $src به $dst"
  fi
done

# ساخت فایل axios
cat > app/lib/axios.ts <<EOF
import axios from 'axios';
import { API_BASE_URL } from './constants';

const axiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

export default axiosInstance;
EOF

# ساخت فایل constants
cat > app/lib/constants.ts <<EOF
export const API_BASE_URL = 'https://kermaneno.ir/wp-json/seasons/v1';
EOF

echo "✅ ساختار جدید با موفقیت ساخته شد!"

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    // "paths": {
    //   "@/*": ["./*"]
    // }
    "paths": {
  "@/*": ["./app/*"]
}
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
